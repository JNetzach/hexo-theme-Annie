{"meta":{"title":"JNetzach","subtitle":"","description":"","author":"JNetzach","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"1-Nov-2021","slug":"1-Nov-2021","date":"2021-11-01T15:00:38.000Z","updated":"2021-11-01T15:29:35.450Z","comments":true,"path":"2021/11/01/1-Nov-2021/","link":"","permalink":"http://example.com/2021/11/01/1-Nov-2021/","excerpt":"","text":"自学者(autodidact)以“自我”为主的态度“自学”。 当下，获取信息已经足够方便，剩下的只需本人自立，付诸行动，自学，就是最根本的学习方法。 The Success Pyramid： confidence(自信心) self-management(自我管理) learning 首先，自信：人在面对威胁的时候会让身体和头脑进入封闭状态，在次状态下人是无法学习新知识的，所以首先自己必须对学习的东西要有足够的信心。 其次，自我管理能力：对学习的安排、组织、计划、时间管理、行动能力……。准备学什么，就需要自己调查用什么书，什么材料等等。 最好，用一个文件夹，把所有资料、练习内容安排好，制定一个学习计划，安排时间，最后把学习成果制作成一份报告。 养成良好的学习习惯，不要拖延。 考核自己的水平。 Become a powerful Software Engineer PS : done.","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"31-Oct-2021","slug":"31-Oct-2021","date":"2021-10-31T15:28:45.000Z","updated":"2021-10-31T16:13:03.755Z","comments":true,"path":"2021/10/31/31-Oct-2021/","link":"","permalink":"http://example.com/2021/10/31/31-Oct-2021/","excerpt":"","text":"Belief Programming Bruce Lee Become a powerful Programmer pull ups = 5 push ups = 50 Squat =","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"30-Oct-2021","slug":"30-Oct-2021","date":"2021-10-30T06:53:51.000Z","updated":"2021-10-30T15:49:14.763Z","comments":true,"path":"2021/10/30/30-Oct-2021/","link":"","permalink":"http://example.com/2021/10/30/30-Oct-2021/","excerpt":"","text":"专注 在一个时间内，全力以赴，投入全部的专注力只做一件事。 Become a powerful Software Engineer pull ups : 5 push ups : Squat : 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"29-Oct-2021","slug":"29-Oct-2021","date":"2021-10-29T13:04:42.000Z","updated":"2021-10-29T13:17:52.778Z","comments":true,"path":"2021/10/29/29-Oct-2021/","link":"","permalink":"http://example.com/2021/10/29/29-Oct-2021/","excerpt":"","text":"原则理想生活的两端光谱，一端是基于你所取得的成就，另一端是基于当下。前者认为生活的意义来自未来的成长和影响力，而后者认为生活中的快乐源于当下，享受每天。 从始至终的生活，一旦确定目标，接下来的一切都是为了实现目标的过程。 五步流程 第一步：选择目标 第二步：诊断问题的根源，不要以为问题是一次性现象，很多问题往往能反映一个人的基本缺陷； 第三步：识别问题，而非容忍问题； 第四步：订制消除问题的计划 第五步：执行计划 Become a powerful Software Engineer pull ups: 5 push ups: 50 Squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"28-Oct-2021","slug":"28-Oct-2021","date":"2021-10-28T14:24:57.000Z","updated":"2021-10-28T14:33:44.748Z","comments":true,"path":"2021/10/28/28-Oct-2021/","link":"","permalink":"http://example.com/2021/10/28/28-Oct-2021/","excerpt":"","text":"如果你没有沉迷于代码，沉迷于GitHub，沉迷于数字化，你便无法成功？ 只有沉迷于一个东西，你才可能得到它？ 可能吧，但我好像没有沉迷的东西，或者我沉迷的游戏，也没带给我什么，我沉迷小说，我看过了无数主角的魔幻完美的生活，但我的生活还是一片混乱。 以上的沉迷，只带给我无尽的焦虑。 我需要一个能带给我未来的东西，是什么？ Become a powerful Software Engineer pull ups : 5 push ups : Squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"程序员的十条法则","slug":"程序员的十条法则","date":"2021-10-27T11:37:31.000Z","updated":"2021-10-27T12:05:02.657Z","comments":true,"path":"2021/10/27/程序员的十条法则/","link":"","permalink":"http://example.com/2021/10/27/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%8D%81%E6%9D%A1%E6%B3%95%E5%88%99/","excerpt":"","text":"专注：一个时间只做一件事，一旦开始全力以赴。 心无杂念：在编程之前，清空大脑，摒弃一切杂念。一旦工作，就暂时先与外在世界断线。与社交网络，手机等工具断开连线。 初学者的心态：不要忘记自己还是菜鸟时的日子。虚幻若谷，坚持以初学者的心态对待技术问题。 无我：不能太自我。无论你是谁，你并不重要。 不要设置职业目标：对于工作，全力以赴即可。不要为了得到什么而忽略了当下的生活。每一天为了乐趣而活。 敏事慎言：如果没有什么必要说的，就不要浪费各自的时间。 正视自我：为自己而生，学会关心自己与周围的环境。无论做什么，一心一意。乐在其中，每一分每一秒。 做自己的Boss：对外界的压迫，说 “ 不 ”。 兴趣：尝试一些跟工作无关的事情。不管是什么，投入进去。 淡泊宁静：一切终将流逝，不用执着于此。","categories":[],"tags":[]},{"title":"27-Oct-2021","slug":"27-Oct-2021","date":"2021-10-27T11:12:34.000Z","updated":"2021-10-27T11:36:40.345Z","comments":true,"path":"2021/10/27/27-Oct-2021/","link":"","permalink":"http://example.com/2021/10/27/27-Oct-2021/","excerpt":"","text":"程序员与年龄 随着年龄的增加，能力与提升建议 业务能力 学习能力 阅读 专业论文 行业动态 新技术 认知 沟通 常识与见解 体态礼仪 投资能力 不能一辈子靠技术生存 有价值的实物：房子 理财 工资 副业：文章 Become a powerful Software Engineer pull ups: 5 push ups: 50 Squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"26-Oct-2021","slug":"26-Oct-2021","date":"2021-10-26T14:58:20.000Z","updated":"2021-10-27T04:52:38.588Z","comments":true,"path":"2021/10/26/26-Oct-2021/","link":"","permalink":"http://example.com/2021/10/26/26-Oct-2021/","excerpt":"","text":"誓言​ 长夜将至，我从今开始守望，至死方休。 我将不半途而废，不分散注意力，不拖工作。 我将不玩手机，不看小说， 不刷视频。 我将全身心专注于提升我的能力，生死于斯。 我是打破黑暗的利剑，热爱的守卫。 我将生命与时间献给我的热爱。 今夜如此，夜夜皆然。 Become a powerful Software Engineer pull ups: 5 push ups: Squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"25-Oct-2021","slug":"25-Oct-2021","date":"2021-10-25T14:03:36.000Z","updated":"2021-10-25T14:21:35.838Z","comments":true,"path":"2021/10/25/25-Oct-2021/","link":"","permalink":"http://example.com/2021/10/25/25-Oct-2021/","excerpt":"","text":"脚踏实地专注最重要的事 每天起床第一步就是问自己，今天最重要的事情是什么； 第二步，做，专注的去做。 然后，再做规划好的工作。 每天把事情规划好，可以的话可视化记录下来，用软件也好，笔记本也好，只要能记录下来，能时刻查看提醒自己就行。 每天都要定一个截止时间，必须把事情在截至之前完成好。 做每一件事情，投入百分百的注意力，专注于当前所做的事。 给自己划分好工作环境，在工作环境中绝对只工作，绝不在工作环境中做与工作无关的事情。 以上，执行下去，前进、前进、不择手段前进！！！ Become a powerful Software Engineer pull ups：5 push ups: 50 Squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"007-Java-Object-oriented(intermediate)","slug":"007-Java-Object-oriented-intermediate","date":"2021-10-24T07:12:38.000Z","updated":"2021-10-24T15:16:04.407Z","comments":true,"path":"2021/10/24/007-Java-Object-oriented-intermediate/","link":"","permalink":"http://example.com/2021/10/24/007-Java-Object-oriented-intermediate/","excerpt":"","text":"面向对象编程(intermediate)包 包的作用 可以区分相同名字的类 当类很多时，可以很好管理类 控制访问范围 包基本语法 package 包名; ​ package 关键字，表示打包 包的原理 实际上就是创建不同的文件夹、目录来保存类文件 包的命名 命名规则 只能包含数字、字母、下划线、小圆点.，但不能用数字开头，不能时关键字或保留字 命名规范 一般是小字母+小圆点 com.公司名.项目名.业务模块名 常用的包 一个包下，包含很多类，Java中常用的包有： java.lang.*//lang包是基本包，默认引入，不需要再引入 java.util.*//util包，系统提供的工具包，工具类，使用Scanner java.net.*//网络包，网络开发 java.awt.*//做Java的界面开发，GUI 引入、导入包 语法：import 包; 我们引入一个包主要的目的是使用该包下的类 注意事项和细节 package的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句package import指令 位置放在package的下面，在类定义前面，可以有多句且没有顺序的要求 访问修饰符 基本介绍 Java提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限 公开级别：用public修饰，对外公开 受保护级别：用protected修饰，对子类和同一个包中的类公开 默认级别：没有修饰符号，向同一个包的类公开 私有级别：用private修饰，只有类本身可以访问，不对外公开 访问范围 访问级别 访问控制修饰符 同类/本类 同胞 子类 不同包 公开 public ✔ ✔ ✔ ✔ 受保护 protected ✔ ✔ ✔ X 默认 没有修饰符 ✔ ✔ X X 私有 private ✔ X X X 注意事项 修饰符可以用来修饰类中的属性，成员方法以及类 只有默认的和public才能修饰类，并且遵循上述访问权限的特点 成员方法的访问规则和属性完全一样 *封装 介绍 封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作[方法]封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作[方法]，才能对数据进行操作。 优点 隐藏实现细节： 方法(连接数据库)&lt;– 调用(传入参数) 可以对数据进行验证，保证安全合理 实现步骤 将属性进行私有化【不能直接修改属性】 提供一个公共的set方法，用于对属性判断并赋值 1234public void setXxx(类型 参数名)&#123;//Xxx表示某个属性//加入数据验证的业务逻辑属性 = 参数名&#125; 提供一个共有的get方法，用于获取属性的值 123public XX getXxx()&#123;//权限判断return xx;&#125; *继承 介绍 继承可以解决代码复用，让编程更加靠近人类思维。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可。 基本语法 class 子类 extends 父类{ } 子类就会自动拥有父类定义的属性和方法 父类又叫超类，基类。 子类又叫派生类 优点 提高代码的复用性 提高代码的扩展和维护性 细节 子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过公共类的方法访问 子类必须调用父类的构造器，完成父类的初始化 当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过 如果希望指定去调用父类的某个构造器，则显式的调用一下：super(参数列表) super在使用时，需要放在构造器第一行 super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器 所有类都是Object类的子类 父类构造器的调用不限于直接父类，将一直往上追溯直到Object类(顶级父类) 子类最多只能继承一个父类(指直接继承)，即Java中是单继承机制。 不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系 *多态 介绍 方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的 对象的多态 一个对象的编译类型和运行类型可以不一样 编译类型在定义对象时，就确定了，不能改变 运行类型是可以变化的 编译类型是看定义时 = 号 的左边， 运行类型看 = 号的右边 细节 多态的前提是，两个对象(类)存在继承关系 属性没有重写之说，属性的值看编译类型 多态的向上转型： 本质：父类的引用指向了子类的对象 语法：父类类型 引用名 = new 子类类型(); 特点：编译类型看左边，运行类型看右边。 可以调用父类的所有成员(需遵守访问权限)，不能调用子类中特有成员；最终运行效果看子类的具体实现 多态的向下转型 语法：子类类型 引用名 = (子类类型) 父类引用 只能强转父类的引用，不能强转父类的对象 要求父类的引用必须指向的是当前目标类型的对象 可以调用子类类型中的所有成员 Java动态绑定机制 当调用对象方法的时候，该方法会和该对象的内存地址/运行类型绑定 当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用 应用 多态数组：数组的定义类型为父类类型，类名保存的实际元素类型为子类类型 多态参数：方法定义的形参类型为父类类型，实参类型允许为子类类型 super 介绍 super代表父类的引用，用于访问父类的属性、方法、构造器 基本语法 访问父类的属性，但不能访问父类private属性 访问父类的方法，不能访问父类的private方法 访问父类的构造器，只能放在构造器的第一句，只能出现一句 优点 调用父类的构造器的好处(分工明确，父类属性由父类初始化，子类的属性由子类初始化) 当子类中有和父类中的成员(属性和方法)重名时，为了访问向父类的成员，必须通过super。如果没有重名，使用super、this、直接访问是一样的效果 super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；如果多个基类中都有同名的成员，使用super访问遵循就近原则 super和this的bij 方法重写/覆盖(overwrite) 介绍 简单的说，方法覆盖就是子类有一个方法，和父类的某个方法的名称、返回类型、参数一样，那么我们就说子类的这个方法覆盖了父类的那个方法 注意事项 方法重写需要满足的条件 子类的方法参数，方法名称，要和父类方法的参数，方法名称完全一样 子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类 子类方法不能缩小父类方法的访问权限 Object类详解 equals方法 == 和 equals 对比 == ：既可以判断基本类型，又可以判断引用类型 == ：如果判断基本类型，判断的是值是否相等。 == ：如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象 equals ：是Object类中的方法，只能判断引用类型 默认判断是否是地址是否相等，子类中往往重写该方法，用于判断内容是否相等 hashCode方法 提高具有哈希结构的容器的效率 两个引用，如果指向的是同一个对象，则哈希值肯定是一样的 两个引用，如果指向的是不同对象，则哈希值是不一样的 哈希值主要根据地址号来的，不能完全将哈希值等价于地址 toString方法 默认返回：全类名+@+哈希值的十六进制，子类往往重写toString方法，用于返回对象的属性信息 重写tostring方法，打印对象或者拼接对象时，都会自动调用该对象的toString形式 当直接输出一个对象时，toString方法会被默认的调用 finalize方法 当对象被回收时，系统自动调用该对象的finalize方法，子类可以重写该方法，做一些释放资源的操作 什么时候被回收：当某个对象没有引用时，则JVM就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁对象，在销毁该对象前，会先调用finalize方法 垃圾回收机制的调用，是由系统来决定，也可以通过System.gc()主动触发垃圾回收机制 断点调试 断点调试，一步一步看源码执行的过程，从而发现错误所在 断点调试过程中，是运行状态，是以对象的运行类型来执行 断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，试到出错代码行即显示错误，停下，进行分析从而找到这个Bug 必须掌握的技能，断点调试也能查看Java底层源代码的执行过程","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"24-Oct-2021","slug":"24-Oct-2021","date":"2021-10-24T01:42:55.000Z","updated":"2021-10-25T03:45:32.499Z","comments":true,"path":"2021/10/24/24-Oct-2021/","link":"","permalink":"http://example.com/2021/10/24/24-Oct-2021/","excerpt":"","text":"学习新事物的方法方法分为三阶段： 选定方法 修正方法 遵循方法执行 第一阶段：准备好学习后，寻找对学习有用的方法，比如，学习编程，那就找学习编程的方法，可以看别人都是怎么学习的，怎么学习会更好。 第二阶段：选择好学习方法后，不能全部照搬着执行，因为同一个方法，对每个人有效程度是不一样的。可能方法不够全面，或一部分对自己无效，那就需要自己修正，把它完善成对自己更有效，更高效的方法。 第三阶段：执行，刻意练习、微小改进、及时反馈、高效率重复，最后给自己时间，时间会给自己成果。 Become a powerful Software Engineer pull ups: 5 push ups: Squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"006 Java Object Oriented (Basic)","slug":"006-Java-Object-Oriented-Bisic","date":"2021-10-23T15:43:10.000Z","updated":"2021-10-24T07:13:29.416Z","comments":true,"path":"2021/10/23/006-Java-Object-Oriented-Bisic/","link":"","permalink":"http://example.com/2021/10/23/006-Java-Object-Oriented-Bisic/","excerpt":"","text":"面向对象编程(基础)类与对象(OOP) 介绍：一个程序，有很多事物(对象[属性,行为]) 创建对象 实例化对象 类实例化 类与对象的区别和联系 类是抽象的、概念的，代表一类事物，比如:人类，猫类……，即 是数据类型。 对象是具体的、实际的，代表一个具体事物，即是实例。 类是对象的模板，对象是类的一个个体，对应一个实例。 属性/成员变量 从概念或叫法：成员变量 = 属性 = field (即 成员变量是用来表示属性的) 属性是类的一个组成部分，一般是基本数据类型，也可以是引用类型(对象、数组)。 属性的注意事项和细节 属性的定义语法同变量，例：访问修饰符 属性类型 属性名； 属性的定义类型可以为任意类型，包含基本类型或引用类型 属性如果不赋值，有默认值，规则和数组一致。 访问修饰符简单介绍：控制属性的访问范围有四种 public、protected、默认、private 创建对象 先声明再创建 Cat cat;//声明对象 cat cat = new Cat();//创建对象 直接创建 Cat cat = new Cat(); 类和对象的内存分配机制 Java内存的结构分析 栈：一般存放基本数据类型(局部变量) 堆：存放对象(Cat cat, 数组等) 方法区：常量池(常量，比如字符串)，类加载信息 Java创建对象流程 先加载类信息(属性和方法信息，只会加载一次) 在堆中分配空间，进行默认初始化 把地址赋给类名，类名指向对象 进行指定初始化 *成员方法 基本介绍： 在某些情况下，我们需要定义成员方法(简称方法)。比如人类：除了有一些属性外(年龄、姓名……)，还有人类行为 比如：说话、跑步、学习……。这时就需要用成员方法才能完成。 方法调用 当程序执行到方法时，就会开辟一个独立的空间(栈空间) 当方法执行完毕，或者执行到return语句时，就会返回 返回到调用方法的地方 返回后，继续执后方法后面的代码 当main方法(栈)执行完毕，整个程序退出 成员方法的优点 提高代码的复用性 可以将实现的细节封装起来，然后供其他用户来调用即可 成员方法的定义 1234访问修饰符 返回数据类型 方法名 (参数列表…)&#123;//方法体语句；return 返回值；&#125; 参数列表：表示成员方法输入 如：cal(int n)，getSum(int num1, int num2) 返回数据类型 :表示成员方法输出，void 表示没有返回值 方法主体：表示为了实现某一项功能代码块 ruturn 语句不是必须的 方法的使用细节 修饰符(作用是控制 方法使用的范围) 返回数据类型 一个方法最多有一个返回值，如果返回多个数值，可以返回数组。 返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)。 如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return 值；而且要求返回类型必须和return的值类型一致或兼容。 如果方法是void，则方法体中可以没有return语句，或者只写return； 方法名：遵循驼峰命名法，最好见名知义，表达出该功能的意思即可，比如 得到两个数的和getSum, 开发中按照规范 参数列表 一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如 getSum(int n1,int n2) 参数类型可以为任意类型，包含基本类型或引用类型，比如 printArr(int【】【】 map) 调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数！ 方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致 方法体 里面写完功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里面不能再定义方法！即 方法不能嵌套定义。 方法调用 同一个类中的方法调用：直接调用即可。比如 print(参数)； 跨类中的方法A类调用B类方法：需要通过对象名调用。比如 对象名.方法名(参数)； 特别说明：跨类的方法调用和方法的访问修饰符相关 *成员方法传参机制 基本数据类型的传参机制：对于基本数据类型，传递的是值(值拷贝)，形参的任何改变不影响实参！ 引用数据类型的传参机制：转递的是地址(传递也是值，但值是地址)，可以通过形参影响实参 方法递归调用 递归就是方法自己调用自己，每次调用时传入不同的变量。递归有助于解决复杂问题，同时可以让代码变得简洁。 递归重要规则 执行一个方法时，就创建一个新的受保护的独立空间(栈空间) 方法的局部变量时独立的，不会互相影响 如果方法中使用的是引用类型(比如数组)，就会共享该引用类型的数据 递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverFlowError, 当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法就执行完毕 方法重载(overload) 介绍 Java中允许同一个类中，多个同名方法的存在，但要求形参列表不一致！ 比如：System.out.println(); out 是 PrintStream类型 重载的优点 减轻起名的麻烦 减轻了记名的麻烦 重载使用细节 方法名 必须相同 参数列表 必须不同(参数类型或个数或顺序，至少有一样不同，参数名无要求) 返回类型：无要求 *可变参数 基本概念 Java允许将同一个类中多个同名功能但参数不同的方法，封装成一个方法 基本语法 123访问修饰符 返回类型 方法名(数据类型……形参名)&#123;&#125; 可变参数使用细节 可变参数的实参可以为0个或任意多个 可变参数的实参可以为数组 可变参数的本质是数组 可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后 一个形参列表中只能出现一个可变参数 作用域 基本使用 面向对象中，变量作用域是非常重要的知识点，要求深刻掌握变量作用域。 在Java编程中，主要的变量就是属性(成员变量)和局部变量 我们说的局部变量一般是指在成员方法中定义的变量。 Java中作用域的分类 全局变量：也就是属性，作用域为整个类体 局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中 全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值。 作用域使用细节 属性和局部变量可以重名，访问时遵循就近原则 在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名。 属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。局部变量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁。即在一次方法调用过程中。 作用域范围不同 全局变量：可以被本类使用，或其他类使用(通过对象调用) 局部变量：只能在本类中对应的方法中使用 修饰符不同 全局变量、属性可以加修饰符 局部变量不可以加修饰符 *构造器、构造方法 介绍 构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。 特点 方法名和类名相同 没有返回值 在创建对象时，系统会自动的调用该类的构造器完成对象的初始化 基本语法： 123[修饰符] 方法名(形参列表)&#123; 方法体；&#125; 说明： 构造器的修饰符可以默认 构造器没有返回值 方法名 和 类名必须一样 实参列表 和 成员方法一样的规则 构造器的调用，由系统完成 构造器的细节 一个类可以定义多个不同构造器，即构造器重载 构造器名和类名要相同 构造器没有返回值 构造器是完成对象的初始化，并不是创建对象 在创建对象时，系统自动的调用该类的构造方法 如果没有定义构造方法，系统会自动给类生成一个默认无参构造方法(也叫默认构造方法) 一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显示的定义一下 this 介绍： Java虚拟机会给每个对象分配this，代表当前对象。 this使用细节 this关键字可以用来访问本类的属性、方法、构造器 this用于区分当前类的属性和局部变量 访问成员的语法：this.方法名(参数列表)； 访问构造器语法：this(参数列表)；注意，只能在构造器中使用，即只能在构造器中访问另一个构造器，必须放在第一条语句 this不能在类定义的外部使用，只能在类定义的方法中使用","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"23 Oct 2021","slug":"23-Oct-2021","date":"2021-10-23T07:07:18.000Z","updated":"2021-10-25T03:45:14.183Z","comments":true,"path":"2021/10/23/23-Oct-2021/","link":"","permalink":"http://example.com/2021/10/23/23-Oct-2021/","excerpt":"","text":"《活着就是为了改变世界》《万万没想到》推荐两本书。 对自己说句，每天都要改变我自己的时间，每天改进一点点，每天进步一点点。不停的进步，不停的前进、前进、前进。 《万万没想到》的方法论： 刻意练习、微小改进、及时反馈、高水平重复。 三个维度 找出要刻意练习的事 分解成碎块 针对碎块做微小改进 及时反馈，需要知道改进的有效与否 高水平重复一万小时 Become a powerful Software Engineer pull ups: 5 push ups: 50 Squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"005 Java Array","slug":"005-Java-Array","date":"2021-10-23T07:02:32.000Z","updated":"2021-10-23T16:20:11.342Z","comments":true,"path":"2021/10/23/005-Java-Array/","link":"","permalink":"http://example.com/2021/10/23/005-Java-Array/","excerpt":"","text":"数组、排序、查找、多维数组数组(Array) 介绍： 可以存放多个同一类型的数据。数组也是一种数据类型，引用数据类型。 数组的使用： 动态初始化1 数据类型 数组名[] = new 数据类型[大小] int x[] = new int[n];//创建一个数组，数据类型x，存放n个int 数组的引用 数组名[下标/索引] //x[2]使用x数组的第三个数 动态初始化2 先声明数组 数据类型 数组名[]; int a[]; int[] a; 创建数组 数组名 = new 数据类型[大小] a = new int[10]; 静态初始化 数据类型 数组名[] = {元素值，元素值} int a[] = &#123;1,2,3,4&#125; Array注意事项 数组是多个相同类型数据的组合，实现对这些数据的统一管理。 数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。 数组创建后，如果没有赋值，会有默认值。 int 0、short 0、byte 0、long 0、float 0.0、double 0.0、char \\u0000、boolean false、String null 舒勇数组的步骤：1.声明数组开辟空间 2.给数组各个元素赋值 3.使用数组 数组的下标是从0开始 数组的下标必须在指定范围内使用，否则报错：下标越界异常，比如int[] arr=new int[5];//有效下标为0-4 数组属引用类型，数组型数据是对象(object) 数组赋值机制 基本数据类型赋值，这个值就是具体的数据，而且互相不影响。int n1 = 2; int n2 = n1; 数组在默认的情况下是引用传递，赋的值是地址。 数组拷贝的话，新建一个数组，然后把要拷贝的数组遍历赋值给新的数组 排序 排序是将一群数据，依指定的顺序进行排列的过程。 排序分类： 内部排序: 指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择式排序法和插入式排序法) 外部排序法： 数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法) 冒泡排序(Bubble Sorting) 通过对待排序序列从后向前(从下标较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大的元素向前移向后部，就像水底下的气泡一样逐渐向上冒。 查找 顺序查找(SequenceSearch) 二分查找 多维数组 二维数组(TwoDimensionalArray) 动态初始化1 语法： 1类型[][]数组名 = new 类型[大小][大小] 比如： 1int a[][] = new int[2][3] 二维数组在内存的存在形式 动态初始化2 先声明：类型 数组名[][]; 再定义(开辟空间) 1数组名 = new 类型[大小][大小] 赋值(有默认值，比如int 类型的就是0) 动态初始化3-列数不确定 静态初始化 定义 1类型 数组名[][]= &#123;&#123;值1，值2……&#125;，&#123;值1，……&#125;，&#123;……&#125;&#125; 使用即可[固定方式访问] 比如: 1int[][] arr = &#123;&#123;1,1,1&#125;,&#123;8,8,9&#125;,&#123;1&#125;&#125;; 二维数组使用细节和注意事项 一维数组的声明方式有： 1int[] x 或者 int x[] 二维数组的声明方式有： 1int[][] y 或者 int[]y[] 或者 int y[][] 二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。 比如： 123//map[][]是一个二维数组 map [][] = &#123;&#123;1,2&#125;,&#123;3,4,5&#125;&#125;//map[0]是一个含有两个元素的一维数组，map[1]是一个含有三个元素的一维数组构成，我们也称为列数不等的二维数组。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"004 Java Control Structure","slug":"004-Java-Control-Structure","date":"2021-10-22T16:25:54.000Z","updated":"2021-10-23T15:43:53.366Z","comments":true,"path":"2021/10/22/004-Java-Control-Structure/","link":"","permalink":"http://example.com/2021/10/22/004-Java-Control-Structure/","excerpt":"","text":"004.Java_Control structure在程序中，程序运行的流程控制决定程序是如何执行的，是程序员必须掌握的，主要有三大流程控制语句，顺序、分支和循环。 1.顺序控制 程序从上至下逐行执行，中间没有任何判断和跳转，程序默认的控制程序。 2.分支 if-else：让程序有选择的执行 分支控制有三种： 单分支(if) 基本语法： 123if(条件表达式)&#123; 执行代码块;(可以有多条语句)&#125; 说明：当条件表达式为true时，就会执行{ }的代码。为false就不会执行。 如果{ }中只有一句语句，可以不用{ }，但建议还是用上{ }，代码更规范。 双分支(if-else) 基本语法： 123456if(条件表达式)&#123; 执行代码块1；&#125;else&#123; 执行代码块2；&#125; 说明：当条件表达式成立，执行代码块1，否则执行代码块2。如果只有一条语句，则{ }能省略，否则不能省略。 流程： 判断表达式 true 就执行代码块1 false 就执行代码块2 多分支(if-else) 基本语法： 123456789if(条件表达式1)&#123; 执行代码块1;&#125;else if()&#123; 执行代码块2;&#125;……else&#123; 执行代码块n;&#125; 说明： 当条件表达式1成立时，即执行代码块1。 如果表达式1不成立，才去判断表达式2是否成立。 如果表达式2成立，就执行代码块2 以此类推，如果所有表达式都不成立 则执行else的代码块，要注意的是，只能有一个执行入口。 多分支可以没有else，如果所有的表达式都不成立，则一个执行入口都没有。 流程图： 嵌套分支 基本介绍： 在一个分支结构中又完整的嵌套另一个完整的分支结构，里面的分支机构称为内层分支，外面的分支结构称为外层分支。 规范：最好不要超过三层(可读性不好) 基本语法： 1234567if()&#123; if()&#123; //if-else…… &#125;else&#123; //if-else &#125;&#125; switch 基本语法： 123456789101112131415switch(表达式)&#123; case 常量1: 语句块1; break; case 常量2; 语句块2; break; …… case 常量n; 语句块n; break; default: default语句块; break;&#125; switch关键字，表示switch分支 表达式 对应一个值 case常量1：当表达式等于常量1，就执行语句块1 break：表示退出switch 如果和 case常量1 匹配，就执行语句块1，如果没有匹配，就继续匹配case 常量2 如果都没有匹配上，就执行default switch细节 表达式数据类型，应和case 后的常量类型一致，或者是可以自动转换成可以相互比较的类型，比如输入的是字符，而常量是int switch(表达式)中表达式的返回值必须是：(byte,short,int,char,enum[枚举],String) case子句中的值必须是常量，不能是变量 default子句是可选的，当没有匹配的case时，执行default break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有写break，程序会顺序执行到switch结尾 switch和if使用建议 如果判断的具体数值不多，而且符号(byte, short, int, char, enum, String)6种类型。建议使用switch。 其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广。 3.*循环 for循环 基本语法： 123for(循环变量初始化；循环条件；循环变量迭代)&#123; 循环操作(语句);&#125; 说明： for 关键字，表示循环控制 四要素：(1)循环变量初始化(2)循环条件(3)循环条件(4)循环变量迭代 循环操作，可以有多条语句(循环执行的代码) 如果循环操作(语句)只有一条语句，可以省略{}，建议不要省略 注意事项和细节 循环条件是返回一个布尔值的表达式 for(;循环判断条件;)中的初始值和变量迭代可以写到其他地方，但两边的分号不能省略 循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开。 while循环 基本语法： 12345循环变量初始化;while(循环条件)&#123; 循环体(语句); 循环变量迭代;&#125; 细节: 循环条件返回一个布尔值的表达式 while循环是先判断再执行语句 do while 基本语法： 12345循环变量初始化;do&#123; 循环体(); 循环变量迭代;&#125;while(循环条件); 说明： do while 关键字 循环四要素 先执行，再判断，一定会执行一次 最后有一个分号； while 和 do……while 区别举例： while 要账，先要账，如果是false才打，打到要回帐为止。 do……while 要账，先打一顿，再要账 *多重循环 介绍： 将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for，while，do……while均可以作为外层循环和内层循环。建议最多不要超过3层，否则代码可读性差。 实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当此循环，开始下一次的循环。 设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次。 4.break break语句用于终止某个语句块的执行，在循环中，当某个条件满足时，终止循环。[switch、for、while、do-while] 1234&#123; ……break； ……&#125; 细节： break语句出现在多层嵌套语句块中时，可以通过标签指明要终止的是哪一层语句块 标签的使用： 1234label1:&#123;…… label2: &#123;…… label3: &#123;…… break label2;//选择要终止的层次 &#125; &#125; &#125; break语句可指定退出哪层 label是标签，由程序员指定 break 后指定到哪个label就退出到哪里 在实际开发中尽量不要使用标签 如果没有指定break，默认退出最近的循环体 5.continue 基本介绍： continue语句用于结束本次循环，继续执行下一次循环。 continue语句出现在多层嵌套循环语句体中时，可以通过标签指明要跳过的是哪一层循环，和上面的标签使用规则一样。 基本语法： 12345&#123; …… continue; ……&#125; 6.return 介绍： return使用在方法，表示跳出所在的方法。 如果return写在main方法，直接退出程序","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"22-Oct-2021","slug":"22-Oct-2021","date":"2021-10-22T15:58:28.000Z","updated":"2021-10-25T03:44:56.287Z","comments":true,"path":"2021/10/22/22-Oct-2021/","link":"","permalink":"http://example.com/2021/10/22/22-Oct-2021/","excerpt":"","text":"改善记忆力第一，重复。最简单让大脑形成新连接的方式，一遍又一遍的重复，把短期记忆转化为长期记忆，反复琢磨，知道完全记牢。但不要无效的重复，要刻意有思考的重复。 第二，间隔回顾。隔一段时间，把需要形成长期记忆的东西回顾一遍。 第三，工作环境。专门创造出一个没有打扰的工作环境，最好还是特定不变的时间，然后在工作环境时，全身心专注工作，让这个习惯融入到生活中。 第四，提示。提示能让我们更好的记忆、回忆，不管什么提示，找出能提示的方法。 Become a powerful Software Engineer pull ups: 5 push ups: squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"21-Oct-2021","slug":"21-Oct-2021","date":"2021-10-21T08:18:55.000Z","updated":"2021-10-25T03:44:40.702Z","comments":true,"path":"2021/10/21/21-Oct-2021/","link":"","permalink":"http://example.com/2021/10/21/21-Oct-2021/","excerpt":"","text":"如何提高专注力规划好使用网络的时间，然后在此时间以外完全避免使用网络。可以在一个本子上，写下规划好的时间，然后在到那个时间之前，无论多想，都不要脱离专注任务。而且，可以把当时的内心欲望，当作注意力训练。在工作之外的空闲时间，也规划好使用网络的时间，进一步提高训练，有效提升专注力。 网络工具本身，对我们的专注力本身没有影响。真正让我们无法专注的行为是，自己感觉无聊或任务难度的挑战，让我们的大脑想要高刺激、低价值的东西。 在一定时间内，高强度的专注，而不是专注一会，就停下来休息。 首先，找出一项优先性很高的深度任务，估算完成任务大概需要的时间，再设定一个截止期限，这个期限要小于估算的时间，然后把截至期限公开。可以的话设定好倒计时，并且工作的时候不会忽略倒计时的存在。此时，你只有一个事情去做，就是高强度的专注工作，不看社交信息、不分散注意力、不幻想、不浏览所有与任务无关的页面，把全身心的专注力投入任务当中。 刚开始，一周最好一次高强度的工作，因为在还没有适应之前，大脑需要休息时间。一旦适应了这种方式，就可以反复冲锋。 设定一个几乎不可能完成的截止期限，并且在过程中投入全身心的专注力。 Become a powerful Software Engineer pull ups: 5 push ups: 50 squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"003-Java-Operator","slug":"003-Java-Operator","date":"2021-10-20T15:00:15.000Z","updated":"2021-10-23T15:44:03.820Z","comments":true,"path":"2021/10/20/003-Java-Operator/","link":"","permalink":"http://example.com/2021/10/20/003-Java-Operator/","excerpt":"","text":"运算符(Operator)运算符是一种特殊符号，用于表示数据的运算、赋值和比较 算术运算符(Arithmetic) 算术运算符是对数值类型的变量进行运算。 % 取模，公式 a % b = a -a / b * b 前++ ：++i，先自增后赋值 后++ ：i++，先赋值后自增 关系运算符(RelationOperator) 关系运算符的结果都是Boolean型，只有true 或 false，常用在if 结构的条件中或循环结构的条件中。 注意细节 关系运算符结果都是Boolean 关系运算符组成的表达式，称为关系表达式 注意”==“，不要误写为“=” 逻辑运算符(LogicOperator) 用于连接多个条件(多个关系表达式)，最终结果也是Boolean值 短路与&amp;&amp; 和 逻辑与&amp; 的区别 &amp;&amp;：如果第一个条件为false，则第二个条件不会判断，最终结果为false，效率高。 &amp;：不管第一个条件是否为false，第二个条件都要判断，效率低。 开发者，基本使用短路与&amp;&amp;，效率高。 短路或|| 和 逻辑或| ||短路或：只要第一个条件为true，第二个条件就不会判断，效率高。 |逻辑或：不管第一个条件是否为true，都会判断第二个条件，效率低。 基本使用||短路或。 ！取反(InverseOperator) !非(取反)，条件成立，结果就为false，否则为true。 ^逻辑异或 当条件a和b不同时，则结果为true，否则为false。 赋值运算符(AssignOperator) 将运算后的值，赋值给指定变量 分类： 基本赋值运算符：= 复合赋值运算符：+= ，-= ，*= ，/= ，%= 特点： 运算顺序从右往左 赋值运算符的左边只能是变量，右边可以是变量、表达式或常量 复合赋值运算符会进行类型转换 三元运算符(TernaryOperator) 基本语法 条件表达式？表达式1：表达式2 如果条件表达式为true，运算后结果为表达式1； 如果条件表达式为false，运算后结果为表达式2； 使用细节 表达式1和表达式2要为可以赋给接受变量的类型(或可以自动转换) 三元运算符可以转换成if–else语句 优先级 运算符有不同的优先级，优先级就是表达式运算中的运算顺序。下表中，上一行运算符优先于下一行。 只有单目运算符、赋值运算符从右向左运算 标识符的命名规则和规范 Java 对各种变量、方法和类等命名时使用的字符序列称为标识符 凡是可以起名字的地方都称为标识符 标识符命名规则 有26个大写字母大小写，0-9，_或$组成 不可以用数字开头 不能用关键字和保留字，但可以包含 严格区分大小写，长度无限 不能含空格 命名规范 包名：多单词组成时所有字母都小写：aaa.bb.cc 类、接口名：多单词组成时，所有单词首字母大写：AaBbCc[大驼峰] 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxYyZz[小驼峰] 常量名：所有字母都大写。多单词时每个单词用下划线连接：XX_YY_ZZ 关键字 专门用途的字符串 所有字母都为小写 保留字 当前版本尚未使用的保留字，往后版本可能作关键字使用 键盘输入语句 import java.util.Scanner //导入java.util包下的Scanner类 文本扫描器(对象)Scanner 步骤： 导入该类的所在包，import java.util.Scanner 创建该类对象(声明变量)，Scanner input = new Scanner(Scanner.in) 调用功能 数据类型 变量名 = myScanner.next+数据类型() *二进制 整数有四种表示： 二进制：0、1，0b或0B开头表示 十进制：0-9 八进制：0-7，0开头 十六进制：0-9及A(10)-F(15), 0x或0X开头表示，此处A-F不区分大小写 进制转换 转十进制 二进制转十进制 规则：从最低位(右边)开始，将每一位上的数提取出来，乘2的(位数-1)次方，再求和。 八进制转十进制 同理，从最低位，将每个位上的数提取出来，乘以8的(位数-1)次方，再求和。 十六进制转十进制 同理，最低位开始，将每个位的数提取，乘以16(位数-1)的次方，再求和。 十进制转换 十进制转二进制 规则：将该数不断除以2，直到商为0为止，然后将得到的所有余数倒过来就是二进制 十进制转八进制 同上，除以8，商到0，余数倒过来。 十进制转十六进制 同上，除以16 二进制转换 二进制转八进制 规则：从低位开始，将二进制数每三位一组，转成对应的八进制 二进制转十六进制 同上，四位一组 八进制转二进制 规则：将八进制数每一位，转换成对应的一个三位一组的二进制。 十六进制转二进制 同上，将十六进制的每一位转换成对应的四位一组的二进制。 *位运算符(BitOperator) 原码、反码、补码 二进制的最高符号位：0表示正数，1表示负数 正数的原码、反码、补码都一样 负数的反码= 原码符号位不变，其他位取反 负数的补码 = 反码+1，负数的反码 = 负数的补码 - 1 0 的反码，补码都是0 Java没有无符号数，都是有符号的 计算机都是以补码的方式运算的 看运算结果时，要看它的原码 ‘&gt;&gt;’右移两位 ‘&lt;&lt;’左移两位 ‘&gt;&gt;&gt;’ ‘~’ 按位取反 ~2=？//按位取反 2&amp;3=？//2按位与3 2|3=？//2按位或3 ~-5=？// 13&amp;7=?//13按位与7 5|4=？//5按位或4 -3^3=?//^按位异或 位运算符(BitOperator)Java一共7个位运算(&amp;、|、^、~、&gt;&gt;、&lt;&lt; 和 &gt;&gt;&gt;) 按位与&amp; 两位全为1，结果为1，否则为0 按位或| 两位有一个为1，结果为1，否则为0 按位异或^ 两位一个为0，一个为1，结果为1，否则为0 按位取反~ 0-&gt;1, 1-&gt;0 算术右移’&gt;&gt;’ 低位溢出，符号位不变，并用符号位补溢出的高位 1 / 2 / 2 …… 算术左移’&lt;&lt;’ 符号位不变低位补0 1 * 2 * 2…… ‘&gt;&gt;&gt;’逻辑右移，无符号右移 低位溢出，高位补0","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"20-OCT-2021","slug":"20-OCT-2021","date":"2021-10-20T14:57:39.000Z","updated":"2021-10-25T03:44:29.653Z","comments":true,"path":"2021/10/20/20-OCT-2021/","link":"","permalink":"http://example.com/2021/10/20/20-OCT-2021/","excerpt":"","text":"#PIC记忆： 明确记忆目标(purpose) 找到记忆兴趣(interest) 好奇心(curiosity) 明确记忆目标(purpose) 记忆内容之前，思考为什么要记这个内容。如果记忆这个内容要花很长时间，那就把记忆的原因在纸上详细的写出来。此方法能让你变得理性和专注。而且一样明确的目标，内容应该是可量化的，还有明确的应用场景。重要的是应用场景。 兴趣(interest) 兴趣在能在很大程度上影响注意力，兴趣高的时候，大脑的自律性、明锐性也会提高。把要记忆的内容和自己感兴趣的东西联系起来。 好奇心(curiosity) 保持好奇心，人对自己不了解的东西，最能提起兴趣。 Become a powerful Software Engineer pull ups: 5 push ups: squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"002-Java-Variable","slug":"002-Java-Variable","date":"2021-10-19T15:48:43.000Z","updated":"2021-10-23T15:44:14.044Z","comments":true,"path":"2021/10/19/002-Java-Variable/","link":"","permalink":"http://example.com/2021/10/19/002-Java-Variable/","excerpt":"","text":"变量 变量介绍 变量是程序的基本组成单位 变量的三个基本要素(类型 + 变量名 + 值)int a = 1 变量可以看成是一个数据在内存中存储空间地址的表示，我们通过变量名可以找到变量(值) 变(变化)量(值) 常用的变量 int double char 变量的注意事项 不同的变量，类型不同，占用空间大小也不一样(int 4个字节，double 8个字节) 变量表示的是内存中的一个存储区域，该区域有自己的变量名和数据类型 变量必须先声明才能使用 变量在同一个作用域内不能重名 同一个变量可以在同一个作用域改变它的数值 变量三要素，变量 = 数据类型 + 变量名 +值 +号的使用 当左右两边都是数值类型时，做加法运算 当左右两边有一方是字符串时，做拼接运算 运算顺序从左到右 数据类型 在Java（强类型语言)中每个种数据都定义了明确的数据类型，在内存中分配了不同大小的内存空间(字节) 基本数据类型 数值型 整数类型，(byte[1], int[4], short[2], long[8]) 浮点类型(小数)，(float[4], double[8]) 字符类型, (char[2]), 存放单个字符，如’a’,’单’ 布尔类型，(boolean[1]), 存放true，false 引用数据类型 类(class) 接口(interface) 数组([ ]) Java各整数类型有固定的范围和字段长度，不管是在哪个操作系统 Java整型 常量默认 int 类型，声明long型常量后须加’l’ 或 ‘L’，变量也默认为 int 类型，除非不足以表示大数，才使用long bit: 计算机中最小存储单位。 byte：基本存储单位，1byte = 8bit 浮点数存放形式，浮点数 = 符号位 + 指数位 + 尾数位，尾数部分可能丢失，造成精度损失(小数都是近似值) Java浮点型常量默认为 double型，声明float型常量须加’f’ 浮点数运算得到的小数点后的结果为近似值 字符类型(char[2]) 两个字节，放单个字符，’a’ ‘人’ ‘\\t’, \\为转义字符 在Java中，char本质为一个整数，输出对应的unicode码的对应字符。 char类型可以运算，相当于一个整数，对应的unicode码 boolean类型，只允许取值true和false，无null，占一个字节，适用于逻辑运算，一般用于程序流流程控制，如：if，while，do-while，for boolean与C不一样的是，不可以用0或非0代替true，false 编码 ASCll(ASCll 编码表，用一个字节表示，一共有128个字符) Unicode(Unicode 编码表 固定大小的编码，使用两个字节表示字符，字母和汉字统一占用两个字节) UTF-8 (编码表，大小可变，字母使用1个字节，汉字使用3个字节) gbk(可以表示汉字，范围广，字母使用1个字节，汉字2个字节) gb2312(可以表示汉字，gb2312 &lt; gbk) big5 码(繁体，台湾、香港) ASCll,一共128个字符，只占用一个字节的后7位，最前面1位统一规定为0. 一个字节可以表示256个字符，ASCll码只用了128个字符。 Unicode: 世界上所有符号都有，每一个符号都是独一无二的编码，没有乱码的问题。一共2^16，65536个字符。兼容ASCll编码 Unicode 缺点: 一个英文字母和一个汉字都占用2个字节，浪费存储空间。 UTF-8是互联网使用最广的一种Unicode实现方式。是一种变长的编码方式，可以使用1-6个字节表示一个符号，根据不同符号改变字节长度。字母占一个字节，汉字占3个字节。 数据类型转换 基本数据类型转换 自动类型转换(AutoConvert)：进行赋值或者运算时，精度小的类型会自动转换为精度大的数据类型 自动类型按精度(容量)大小排序： char——int——long——float——double byte——short——int——long——float——double 注意细节 有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算 当我们把精度(容量)大的数据类型赋值给精度小的数据类型时，就会报错，反之进行自动类型转换 (byte，short) 和 char 之间不会互相自动转换 byte，short，char 三者可以计算，运算前会先转换成int，而且单独运算过也会转换成int bollean不参与转换 自动升原则：表达式结果的类型自动提升为 操作数中最大的类型 强制类型转换 自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型，使用时要加上强制转换符(), 但需注意可能会造成精度降低或溢出 注意细节 数据从大到小，就需要强制转换 强制转换符号只针对最近的操作数有效，往往会使用小括号提升优先级 char类型可以保存int常量值，但不能保存int变量值，需强制转换 byte和short类型在进行运算时，当作int处理 基本数据类型和String类型的转换 在程序开发中，常需要将基本数据类型转换成String类型，或将String类型转换成基本数据类型 基本数据类型转换String类型：将基本数据类型的值 + “”即可 12int a = 1;String str = a + &quot;&quot;; String类型转换基本数据类型：通过基本数据类型的包装类调用parseXX的方法即可 1234String str = 100;Integer.parseInt(str);Integer.parseInt(&quot;123&quot;);Double.parseDouble(&quot;123.1&quot;); 注意事项 在将String类型转换成基本数据类型时，要确保String类型能够转换成有效的数据，比如把”123”转换成整数，但不能把”Hello”转换成整数 注意转换格式","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"19-Oct-2021","slug":"19-Oct-2021","date":"2021-10-19T15:45:56.000Z","updated":"2021-10-25T03:44:19.728Z","comments":true,"path":"2021/10/19/19-Oct-2021/","link":"","permalink":"http://example.com/2021/10/19/19-Oct-2021/","excerpt":"","text":"决定我们能力水平的高低，就在于刻意练习 不要自动完成状态。同样的事情，不能每次都是同一个做法，一次要比一次做得更好。 不要越做越悠闲。爱好与专业，爱好是怎么快乐怎么来，但专业必须要大量的刻意练习。只有大量的刻意练习才能更好的进步。 不要为了短期效率牺牲学习机会。不要为了更快完成事情，就没有思考，不刻意练习。 重要能力进行大量重复刻意训练。 反馈和激励。没有反馈就没有办法纠正错误和得到提高。 Become a powerful Software Engineer pull ups: 5 push ups: 50 squat:","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"JavaBasic","slug":"001-Java-Basic","date":"2021-10-18T15:04:12.000Z","updated":"2021-10-23T15:44:22.506Z","comments":true,"path":"2021/10/18/001-Java-Basic/","link":"","permalink":"http://example.com/2021/10/18/001-Java-Basic/","excerpt":"","text":"Java基础Java概述程序：计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。 Java技术体系平台 Java SE(Java Standard Edition)标准版 Java EE(Java Enterprise Edition)企业版 Java ME(Java Micro Edition)小型版 Java重要特点 面向对象(OOP) 健壮性。强制类型、异常处理、垃圾自动收集 跨平台。(.class文件可跨平台运行) Java语言为解释型语言：编译后的代码，需要用解释器执行。 .class文件称为字节码文件 JDK、JRE、JVM JDK(Java Development Kit Java开发工具包) = JRE + Java开发工具[Java，javac，javadoc，javap等] JRE(Java Runtime Environment Java运行环境) = JVM + Java核心类库[类] JVM Java虚拟机[JVM Java virtual machine]，是包含在JDK中的虚拟计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。 因为JVM，Java程序才可跨平台运行 Java虚拟机机制屏蔽底层运行平台的差别，实现“一次编译，多处运行” JDK = JRE + 开发工具 JRE = JVM + Java SE标准类库(Java核心类库) 运行.class文件，只需安装JRE 1234567//Hello为public修饰的类public class Hello&#123; //main方法 public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;);&#125;//通过Javac命令文件编译，生成.class文件&#125;//再通过Java命令对.class文件进行运行 Java注意事项 源文件以.java为扩展名，基本组成部分为类(class) 执行入口为main()方法。 public static void main(String[] args)&#123; &#125; 严格区分大小写 每个语句以”;”结束 大括号成对出现 一个源文件最多只可有一个public类，其他类个数不限，也可将main方法写在pubic类中, 然后知道运行非public类，这样入口方法就是非public的main方法 文件名与public类名一致 常用转义字符 \\t ：一个制表位，实现对齐功能 \\n ：换行 \\\\ ：一个\\ \\“ ：” \\‘ ：‘ \\r ：回车 常犯初级错误 语法错误 业务逻辑错误 环境错误 单词错误 主类名与文件名不一致 缺少分号’;’ 英文中文符号错误 注释(comment) 解释程序的文字、提高代码的可读性, 不会被JVM解释运行， 写注释是一个程序员必备的良好习惯 单行注释 // 多行注释 /* */ 文档注释 文档注释 文档注释 文档注释内容可被JDK工具Javadoc解析，生成一套以网页文件形式体现该程序的说明文档，一般写在类 基本格式 /** *@ */ 生成对应的文档格式 javadoc -d 文件夹名 -文档注释名 –文档注释名 文件名.java javadoc 标签 标签 描述 示例 @author 标识一个类的作者 @author description @deprecated 指名一个过期的类或成员 @deprecated description {@docRoot} 指明当前文档根目录的路径 Directory Path @exception 标志一个类抛出的异常 @exception exception-name explanation {@inheritDoc} 从直接父类继承的注释 Inherits a comment from the immediate surperclass. {@link} 插入一个到另一个主题的链接 {@link name text} {@linkplain} 插入一个到另一个主题的链接，但是该链接显示纯文本字体 Inserts an in-line link to another topic. @param 说明一个方法的参数 @param parameter-name explanation @return 说明返回值类型 @return explanation @see 指定一个到另一个主题的链接 @see anchor @serial 说明一个序列化属性 @serial description @serialData 说明通过writeObject( ) 和 writeExternal( )方法写的数据 @serialData description @serialField 说明一个ObjectStreamField组件 @serialField name type description @since 标记当引入一个特定的变化时 @since release @throws 和 @exception标签一样. The @throws tag has the same meaning as the @exception tag. {@value} 显示常量的值，该常量必须是static属性。 Displays the value of a constant, which must be a static field. @version 指定类的版本 @version info Java代码规范 类、方法的注释，要以Javadoc的方式来写 非Javadoc 的注释，往往是给代码维护者看的，着重告诉读者为什么如此写，如何修改，注意什么问题等 使用tab操作，实现缩进，默认整体向右边移动，shift+tab整体向左移动 运算符与 = 两边留意各加空格。1 + 1 = 2 源文件使用utf-8编码 行宽度不要超过80字符 代码编写次行风格和行尾风格 12345public class Hello&#123; public static void main(String[] args)&#123; &#125;&#125; Dos命令(了解) Dos: Disk Operating System 磁盘操作系统，Windows目录结构 常用dos命令 查看当前目录：dir dir d:\\x\\x 切换到其他盘下：盘符号 cd \\D 切换到当前盘的其他目录：cd d:\\x\\x cd ..\\..\\x\\x 切换到上一级：cd .. 切换到更目录：cd\\ 创建文件夹 md d:\\\\文件名 删除文件夹 rd d:\\\\文件名 查看指定目录下的所有子级目录 tree 清屏 cls 退出 exit copy：拷贝文件 del：删除文件 echo：输入内容到文件 type move：剪切文件 相对路径、绝对路径 相对路径：从当前目录开始定位 绝对路径：从顶级根目录定位形成的路径 Java API API(Application Programming Interface, 应用程序编程接口)，为Java提供的基本编程接口(Java 提供的类还有相关的方法) Java提供大量的基础类，API文档用于告诉开发者如何使用这些类，已经类里包含的方法。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"18-Oct-2021","slug":"18-Oct-2021","date":"2021-10-18T15:01:03.000Z","updated":"2021-10-25T03:44:01.061Z","comments":true,"path":"2021/10/18/18-Oct-2021/","link":"","permalink":"http://example.com/2021/10/18/18-Oct-2021/","excerpt":"","text":"如何快速学习新技术 需求 技术需求 工作需求 入门 先快速入门基础原理 快速入门基本程序(先做出一个成果) 研究 技术细节、深度 规范 优化 Become a powerful Software Engineer pull ups：5 push ups： Squat: 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"17-10-2021","slug":"17-Oct-2021","date":"2021-10-17T16:16:12.000Z","updated":"2021-10-25T03:43:47.519Z","comments":true,"path":"2021/10/17/17-Oct-2021/","link":"","permalink":"http://example.com/2021/10/17/17-Oct-2021/","excerpt":"","text":"专注的关键在于，处理信息的速度和接受速度之间的关系。 看小说，我们可以一看就是一下午，但如果是看苦涩难懂的专业书籍，看几分钟就没法看下去了。这是因为，我们的大脑处理信息的速度跟不上信息接受的速度，反过来，也就是说，只要让我们的思维跟上事情的发展，就能做到注意力专注。 保持注意力专注的方法： 方法一：动手，就是让身体跟思维同步起来。看书的时候同时做笔记。用行动让大脑积极思考，而且，记笔记能让我们的注意力聚焦在当前所看的内容，更有利于思考。 方法二：早上醒来就开始工作。在大脑没有杂念的时候工作，更能进入专注状态。 方法三：培养特定时间专注的习惯。每天在一个特定的时间内长时间专注完成任务。 方法四：运动。适当的运动能加强血液循环，让大脑获得更多的氧气，头脑更清晰，对长时间专注工作起到帮助作用。 方法五：截至时间。想象，明天就要考试还没有复习。强烈的心理暗示自己，必须马上专注的把事情在截至日期前完成。 最后，专注的根本方法，是要让大脑处理信息的速度跟上信息输入的速度。 Become a powerful Software Engineer Pull ups : 5 Push ups : 50 Squat :","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"Favourite Sentence","slug":"Favorite-Sentence","date":"2021-10-16T17:08:35.000Z","updated":"2021-10-22T02:10:29.646Z","comments":true,"path":"2021/10/16/Favorite-Sentence/","link":"","permalink":"http://example.com/2021/10/16/Favorite-Sentence/","excerpt":"","text":"Love You Love For you I bleed myself dry Everything will be ok in the end, if it is not ok, it is not the end. Everyone is an Actor, Everyone is acting their own script. 心不换愿，愿不至","categories":[],"tags":[]},{"title":"16-Oct-2021","slug":"16-Oct-2021","date":"2021-10-16T15:53:51.000Z","updated":"2021-10-25T03:43:33.909Z","comments":true,"path":"2021/10/16/16-Oct-2021/","link":"","permalink":"http://example.com/2021/10/16/16-Oct-2021/","excerpt":"","text":"童年今天，出去送东西的路上突然记忆小时候把手摔断的时候，回到家怕被发现被骂(不太确定，想不起，也只能推断是这个理由了），都不敢走正门，从家旁边的小过道走后门进去，然后到房间自己一个人偷偷的睡着了，当时手还疼得不是很厉害，后面的事情也回忆不起来了，只记得被爷爷带去包了石膏，带了一个假期的石膏。 突然回忆起来这件事，我就在想，对哦，是有发生过这件事，而且还发生了很多很多事的，为什么感觉这些童年，一点一点要被抹去了。是因为，长大的原因吗？是因为长大了，所以要丢掉点东西吗？要把童年的回忆慢慢的抹去吗？这样才能走进大人的社会吗？ 我也不知道为什么，只是不希望自己忘记，那时的我，还是小小瘦瘦的吧，很小一个，不知道未来为何物，不知道自己喜欢什么，只想要开心。然后时间一秒一秒的过了，到了现在，我成为了什么样的人了，原来我把很多东西都丢了。 好好把这些回忆珍藏吧，不要再弄丢了。 **成为一个厉害的软件工程师吧！ ** Pull ups : 5 Push ups : Squat : 50","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"操作系统实验(一)需完成部分","slug":"操作系统实验-一-需完成部分","date":"2021-10-16T15:41:31.000Z","updated":"2021-10-16T15:52:31.307Z","comments":true,"path":"2021/10/16/操作系统实验-一-需完成部分/","link":"","permalink":"http://example.com/2021/10/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C-%E4%B8%80-%E9%9C%80%E5%AE%8C%E6%88%90%E9%83%A8%E5%88%86/","excerpt":"","text":"实验(一) 问题描述及需求分析 实验问题详细阐述 实验具体内容 实验预期目标 确认输入形式 确认输出形式 测试数据 实验设计：实验问题的详细解决方案和设计思想 使用类或其他数据结构的设计、变量的说明 需要的模块（函数，包括函数的功能，函数参数和输出） 系统框架图（函数之间的关系） 流程图或伪代码（函数的实现过程） 实验结果与分析 实验结果截图，图文展示、描述 对实验结果进行比较，分析结果产生的原因 总结实验结果 实验心得 实验过程中遇到的问题和解决办法 总结自己在实验过程收获和心得 附录 实验关键性代码、代码注释 其他数据","categories":[],"tags":[]},{"title":"15/10/2021","slug":"15-10-2021","date":"2021-10-15T15:08:52.000Z","updated":"2021-10-25T03:43:22.834Z","comments":true,"path":"2021/10/15/15-10-2021/","link":"","permalink":"http://example.com/2021/10/15/15-10-2021/","excerpt":"","text":"今天的主题是 开始 从我小学开始，我就已经每天都在准备开始了，每天晚上睡前都在想，明天要开始好好学习，到初中，再到高中，每天都在等明天开始，然后现在大三了，我还在想开始吗？应该是早一开始，只是我一直以为我说了开始人生才开始真正的开始吧，非常的自欺欺人。无时无刻不在为过去的我所作所为后悔着，但这已是过去，无法改变的了。 大三，别人都是实习的实习，比赛的比赛，有的已经在找工作，而我还在家里等什么时候能回学校，可以说是惨了，为我的大学生活刻上一个大写的惨字。到现在还在后悔大一寒假的时候回来，没想到回来就无路回去了，什么时候才能回去啊，老天！难道我的大学生涯，只有大一上学期吗？啊……，不能再想了，越想越自闭。 那，先到这，可以算是真正的开始了，我说了算的真正开始的人生，——开始——，往后的人生，从现在开始拼搏。 push ups: 50 pull ups: 5 记住，成为厉害的软件工程师。","categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"}]},{"title":"废物是如何练成的","slug":"How waste is come","date":"2021-10-15T01:22:27.000Z","updated":"2021-10-15T12:33:19.789Z","comments":true,"path":"2021/10/15/How waste is come/","link":"","permalink":"http://example.com/2021/10/15/How%20waste%20is%20come/","excerpt":"","text":"时间，每个人拥有的都是一样的，都是一天24小时。 但，一个人他能把一天24小时过得充实，而另一个人能从中午起来，除了吃饭上洗手间，剩下的时间都用在躺床上刷手机上了，准时凌晨一两点睡，日复一日，然后感叹为什么时间过的这么快，计划都还没准备好，一天就这么过去了，最后，这个人就废了。 如此，一个废物就这么练成了。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Diary","slug":"Diary","permalink":"http://example.com/tags/Diary/"},{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}